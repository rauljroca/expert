import { App } from 'astro/app';
import { setGetEnv } from 'astro/env/setup';
import { createGetEnv } from '../utils/env.js';
export function createExports(manifest) {
    const app = new App(manifest);
    const fetch = async (request, env, context) => {
        const { pathname } = new URL(request.url);
        // static assets fallback, in case default _routes.json is not used
        if (manifest.assets.has(pathname)) {
            return env.ASSETS.fetch(request.url.replace(/\.html$/, ''));
        }
        const routeData = app.match(request);
        if (!routeData) {
            // https://developers.cloudflare.com/pages/functions/api-reference/#envassetsfetch
            const asset = await env.ASSETS.fetch(request.url.replace(/index.html$/, '').replace(/\.html$/, ''));
            if (asset.status !== 404) {
                return asset;
            }
        }
        Reflect.set(request, Symbol.for('astro.clientAddress'), request.headers.get('cf-connecting-ip'));
        process.env.ASTRO_STUDIO_APP_TOKEN ??= (() => {
            if (typeof env.ASTRO_STUDIO_APP_TOKEN === 'string') {
                return env.ASTRO_STUDIO_APP_TOKEN;
            }
        })();
        const locals = {
            runtime: {
                env: env,
                cf: request.cf,
                caches: caches,
                ctx: {
                    waitUntil: (promise) => context.waitUntil(promise),
                    // Currently not available: https://developers.cloudflare.com/pages/platform/known-issues/#pages-functions
                    passThroughOnException: () => {
                        throw new Error('`passThroughOnException` is currently not available in Cloudflare Pages. See https://developers.cloudflare.com/pages/platform/known-issues/#pages-functions.');
                    },
                    props: {},
                },
            },
        };
        setGetEnv(createGetEnv(env));
        const response = await app.render(request, { routeData, locals });
        if (app.setCookieHeaders) {
            for (const setCookieHeader of app.setCookieHeaders(response)) {
                response.headers.append('Set-Cookie', setCookieHeader);
            }
        }
        return response;
    };
    return { default: { fetch } };
}
