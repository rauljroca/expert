import type { CacheStorage as CLOUDFLARE_CACHESTORAGE, Request as CLOUDFLARE_REQUEST, ExecutionContext } from '@cloudflare/workers-types';
import type { SSRManifest } from 'astro';
type Env = {
    [key: string]: unknown;
    ASSETS: {
        fetch: (req: Request | string) => Promise<Response>;
    };
    ASTRO_STUDIO_APP_TOKEN?: string;
};
export interface Runtime<T extends object = object> {
    runtime: {
        env: Env & T;
        cf: CLOUDFLARE_REQUEST['cf'];
        caches: CLOUDFLARE_CACHESTORAGE;
        ctx: ExecutionContext;
    };
}
export declare function createExports(manifest: SSRManifest): {
    default: {
        fetch: (request: Request & CLOUDFLARE_REQUEST, env: Env, context: ExecutionContext) => Promise<Response>;
    };
};
export {};
